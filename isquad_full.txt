C######################################################################
      SUBROUTINE ISQUAD(XX,KFIX,NOD,IADRES,MATNUM,S,FEXT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z),INTEGER(I-N)
      COMMON /KONTRL/ NUMNP,NDOF,NUMEL,NNPE,NSD,NEQ,LENGTH
      COMMON /MATRL / NMAT,RMAT(5,4)
      COMMON /DEVICE/ IIN,IOUT,IBUG
      DOUBLE PRECISION J,JJ
      DIMENSION XX(NSD,NUMNP),KFIX(NEQ),NOD(NNPE,NUMEL),
     .          IADRES(NEQ),MATNUM(NUMEL),S(LENGTH),FEXT(NEQ),
     .          X(4,2),W(2,4),G(2,2),B(2,4),T(4,4),GQPTS(4,2),
     .          J(2,2)
C#####Initialize 2x2 Gauss Quadrature Points
      GQPTS(1,1)=-(1/SQRT(3.))
      GQPTS(1,2)=-(1/SQRT(3.))
      GQPTS(2,1)=(1/SQRT(3.))
      GQPTS(2,2)=-(1/SQRT(3.))
      GQPTS(3,1)=(1/SQRT(3.))
      GQPTS(3,2)=(1/SQRT(3.))
      GQPTS(4,1)=-(1/SQRT(3.))
      GQPTS(4,2)=(1/SQRT(3.))

      DO 10 I=1,2
      DO 10 M=1,4
   10 B(I,M)=0.
C#####Loop over all elements
      DO 100 N=1,NUMEL
      MAT=MATNUM(N)
      THECON=RMAT(1,MAT)
      THICK=RMAT(2,MAT)
C#####Clear the local stiffness matrix
      DO 60 I=1,4
      DO 60 M=1,4
   60 T(I,M)=0.

C#####Get element node coordinates
      DO 20 I=1,4
      X(I,1)=XX(1,NOD(I,N))
   20 X(I,2)=XX(2,NOD(I,N))
C#####Loop over all GQ evaluation points
      DO 30 I=1,4
      ETA=GQPTS(I,2)
      XI=GQPTS(I,1)
C#####Evaluate shape function derivatives
      W(1,1)=-(1.-ETA)
      W(1,2)=(1.-ETA)
      W(1,3)=(1.+ETA)
      W(1,4)=-(1.+ETA)
      W(2,1)=-(1.-XI)
      W(2,2)=-(1.+XI)
      W(2,3)=(1.+XI)
      W(2,4)=(1.-XI)
C#####Evaluate Jacobian matrix
      J(1,1) = W(1,1)*X(1,1)+W(1,2)*X(2,1)+W(1,3)*X(3,1)+W(1,4)*X(4,1)
      J(1,2) = W(1,1)*X(1,2)+W(1,2)*X(2,2)+W(1,3)*X(3,2)+W(1,4)*X(4,2)
      J(2,1) = W(2,1)*X(1,1)+W(2,2)*X(2,1)+W(2,3)*X(3,1)+W(2,4)*X(4,1)
      J(2,2) = W(2,1)*X(1,2)+W(2,2)*X(2,2)+W(2,3)*X(3,2)+W(2,4)*X(4,2)
      J(1,1) = J(1,1)/4.
      J(1,2) = J(1,2)/4.
      J(2,1) = J(2,1)/4.
      J(2,2) = J(2,2)/4.
      JJ = J(1,1)*J(2,2)-J(2,1)*J(1,2)
C#####Evaluate jacobian matrix inverse
      G(1,1) = J(2,2)/JJ
      G(1,2) = -J(2,1)/JJ
      G(2,1) = -J(1,2)/JJ
      G(2,2) = J(1,1)/JJ
C####Evaluate B matrix
      B(1,1) = G(1,1)*W(1,1)+G(1,2)*W(2,1)
      B(1,2) = G(1,1)*W(1,2)+G(1,2)*W(2,2)
      B(1,3) = G(1,1)*W(1,3)+G(1,2)*W(2,3)
      B(1,4) = G(1,1)*W(1,4)+G(1,2)*W(2,4)
      B(2,1) = G(2,1)*W(1,1)+G(2,2)*W(2,1)
      B(2,2) = G(2,1)*W(1,2)+G(2,2)*W(2,2)
      B(2,3) = G(2,1)*W(1,3)+G(2,2)*W(2,3)
      B(2,4) = G(2,1)*W(1,4)+G(2,2)*W(2,4)
C#####Evaulate B'*B and to element stiffness matrix
      DO 40 M=1,4
      DO 40 K=M,4
      SUM=0.
      DO 50 L=1,2
   50 SUM = SUM + B(L,M)*B(L,K)
      T(M,K) = T(M,K)+SUM*THICK*THECON
   40 T(K,M) = T(M,K)
   30 CONTINUE
      CALL ADSTIF(KFIX,S,FEXT,NOD,IADRES,T,RE,4,N,0)
  100 CONTINUE
      RETURN
      END
