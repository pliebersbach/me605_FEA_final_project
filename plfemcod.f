      PROGRAM FEMCOD
      IMPLICIT DOUBLE PRECISION (A-H,O-Z),INTEGER(I-N)
      COMMON IA(4000),A(40000)
      COMMON /MPOINT/ MPCORD,MPFEXT,MPDISP,MPTEMP,MPWORK,MPSTIF,MPEND,
     .                MAXREL,IPKFIX,IPNOD,IPIADR,IPMAT,IPEND,MAXINT
      COMMON /KONTRL/ NUMNP,NDOF,NUMEL,NNPE,NSD,NEQ,LENGTH
      COMMON /MATRL / NMAT,RMAT(5,4)
      COMMON /DEVICE/ IIN,IOUT,IBUG
      CHARACTER*80 CARD
C
C---- WRITTEN BY PROFS. M.E. PLESHA, R.D. COOK & D.S. MALKUS
C                DEPARTMENT OF ENGINEERING MECHANICS
C                UNIVERSITY OF WISCONSIN--MADISON
C                SEPT.,1984
C                MARCH,1988  REVISED (VER 3.28.89.1)
C                OCT., 1991  REVISED (VER 10.20.91.1)
C                SEPT.,1996  REVISED (VER  9.25.96.1)
C
C        THIS PROGRAM IS UNSUPPORTED, IS INTENDED FOR EDUCATIONAL USE
C        ONLY, AND CAN BE FREELY COPIED FOR THIS PURPOSE.  ALL OTHER
C        RIGHTS RESERVED BY THE AUTHORS.
C
      IBUG=1
      IIN=15
      IOUT=16
      CALL OPENER(1)
      MAXREL=40000
      MAXINT=4000
C
C---- READ TITLE CARD AND CONTROL DATA
      READ(IIN,1000)CARD
      WRITE(IOUT,2000)CARD
      READ(IIN,1001)NUMNP,NDOF,NUMEL,NNPE,NSD,NMAT
      WRITE(IOUT,2001)
      NEQ=NUMNP*NDOF
      CALL WI('NUMNP   ',NUMNP ,1)
      CALL WI('NDOF    ',NDOF  ,1)
      CALL WI('NUMEL   ',NUMEL ,1)
      CALL WI('NNPE    ',NNPE  ,1)
      CALL WI('NSD     ',NSD   ,1)
      CALL WI('NMAT    ',NMAT  ,1)
      CALL WI('NEQ     ',NEQ   ,1)
C
C---- INITIALIZE MEMORY POINTERS
      MPCORD=1
      MPFEXT=MPCORD+NUMNP*NSD
      MPDISP=MPFEXT+NUMNP*NDOF
      MPTEMP=MPDISP+NUMNP*NDOF
      MPWORK=MPTEMP+NUMNP
      MPSTIF=MPWORK+NUMNP*NDOF
      MPEND=MPSTIF
C
      IPKFIX=1
      IPNOD=IPKFIX+NUMNP*NDOF
      IPIADR=IPNOD+NUMEL*NNPE
      IPMAT=IPIADR+NUMNP*NDOF
      IPEND=IPMAT+NUMEL
C
      WRITE(IOUT,2002)
      CALL WI('MPCORD  ',MPCORD,1)
      CALL WI('MPFEXT  ',MPFEXT,1)
      CALL WI('MPDISP  ',MPDISP,1)
      CALL WI('MPTEMP  ',MPTEMP,1)
      CALL WI('MPWORK  ',MPWORK,1)
      CALL WI('MPSTIF  ',MPSTIF,1)
      CALL WI('IPKFIX  ',IPKFIX,1)
      CALL WI('IPNOD   ',IPNOD ,1)
      CALL WI('IPIADR  ',IPIADR,1)
      CALL WI('IPMAT   ',IPMAT ,1)
      CALL WI('IPEND   ',IPEND ,1)
      CALL WI('MAXREL  ',MAXREL,1)
      CALL WI('MAXINT  ',MAXINT,1)
C
C---- CHECK AVAILABLE MEMORY
      CALL MCHECK(MPEND,IPEND,MAXREL,MAXINT)
C
C---- COMPLETE DATA INPUT
      CALL INPUT(A(MPCORD),A(MPFEXT),IA(IPKFIX),IA(IPNOD),IA(IPMAT))
C
C---- DETERMINE EQN-SYSTEM COLUMN HEIGHTS, DIAG ADDRESSES,LENGTH AND
C     MEAN SEMI-BANDWIDTH, MBAND
      CALL COLHT(IA(IPNOD),IA(IPKFIX),IA(IPIADR),NEQ,NUMNP,NUMEL,NNPE,
     .           NDOF,LENGTH,MBAND)
C
C---- ALLOCATE STORAGE FOR STIFFNESS MATRIX
      MPEND=MPSTIF+LENGTH
      WRITE(IOUT,2003)
      CALL WI('MBAND   ',MBAND,1)
      CALL WI('LENGTH  ',LENGTH,1)
      CALL WI('MPEND   ',MPEND ,1)
C
C---- CHECK AVAILABLE MEMORY
      CALL MCHECK(MPEND,IPEND,MAXREL,MAXINT)
C
C---- CLEAR STIFFNESS
      DO 10 I=MPSTIF,MPSTIF+LENGTH-1
   10 A(I)=0.
C
C---- FORM STIFFNESS MATRIX
C     CALL BEMSTF(A(MPCORD),IA(IPKFIX),IA(IPNOD),IA(IPIADR),IA(IPMAT),
C    .            A(MPSTIF),A(MPFEXT))
C     CALL CSTSTF(A(MPCORD),IA(IPKFIX),IA(IPNOD),IA(IPIADR),IA(IPMAT),
C    .            A(MPSTIF),A(MPFEXT))
      CALL ISQUAD(A(MPCORD),IA(IPKFIX),IA(IPNOD),IA(IPIADR),IA(IPMAT),
     .            A(MPSTIF),A(MPFEXT))
C
C---- MODIFY STIFFNESS AND LOAD VECTOR TO ACCOUNT FOR PRESCRIBED DISPL
      CALL MODIFY(A(MPSTIF),A(MPFEXT),IA(IPKFIX),IA(IPIADR),NEQ,LENGTH)
C
C---- FACTORIZE STIFFNESS AND CHECK FOR POSSIBLE ERROR IN FACTORIZATION
      IOP=1
      TOL=1.E-06
      ZERO=0.
      CALL TRFACT(A(MPSTIF),ZERO,A(MPWORK),IA(IPIADR),TOL,NEQ,LENGTH,
     .            IERROR,IPOSDF,IOUT,IOP)
      IF(IPOSDF.NE.0) CALL WI('IPOSDF  ',IPOSDF,1)
C
C---- TRANSFER EXTERNAL FORCE TO DISPLACEMENT ARRAY
      DO 30 I=1,NEQ
   30 A(MPDISP+I-1)=A(MPFEXT+I-1)
C
C---- SOLVE SIMULTANEOUS EQUATIONS
      IOP=2
      ZERO=0.
      IZERO=0
      CALL TRFACT(A(MPSTIF),A(MPDISP),ZERO,IA(IPIADR),ZER0,NEQ,LENGTH,
     .            IZERO,IZERO,IZERO,IOP)
C
C---- OUTPUT SOLUTION
C
      WRITE(IOUT,2004)
      WRITE(IOUT,2005)
     . ((I,J,A(MPDISP+(I-1)*NDOF+J-1),J=1,NDOF),I=1,NUMNP)
C
C---- POST-PROCESS DATA
C     CALL CSTSTR(A(MPCORD),IA(IPNOD),IA(IPMAT),A(MPDISP))
      CALL BARSTR(A(MPCORD),IA(IPNOD),IA(IPMAT),A(MPDISP))
C
      CALL OPENER(2)
      STOP
 1000 FORMAT(A80)
 1001 FORMAT(6I5)
 2000 FORMAT(///,1H ,A80,///)
 2001 FORMAT(///,21H PROGRAM CONTROL DATA,/,1X,20(1H-))
 2002 FORMAT(///,39H REAL AND INTEGER ARRAY MEMORY POINTERS,/,
     .       1X,38(1H-))
 2003 FORMAT(36H STIFFNESS MATRIX STORAGE PARAMETERS,/,1X,35(1H-))
 2004 FORMAT(///,21H NODAL POINT SOLUTION,2X,
     .       39H(NODE #, NODAL DOF #, VALUE OF THE DOF),/,
     .       1X,20(1H-))
 2005 FORMAT(1(2I5,E14.6,2X))
      END
C######################################################################
      SUBROUTINE ISQUAD(XX,KFIX,NOD,IADRES,MATNUM,S,FEXT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z),INTEGER(I-N)
      COMMON /KONTRL/ NUMNP,NDOF,NUMEL,NNPE,NSD,NEQ,LENGTH
      COMMON /MATRL / NMAT,RMAT(5,4)
      COMMON /DEVICE/ IIN,IOUT,IBUG
      DOUBLE PRECISION J,JJ
      DIMENSION XX(NSD,NUMNP),KFIX(NEQ),NOD(NNPE,NUMEL),
     .          IADRES(NEQ),MATNUM(NUMEL),S(LENGTH),FEXT(NEQ),
     .          X(4,2),W(2,4),G(2,2),B(2,4),T(4,4),GQPTS(4,2),
     .          J(2,2)
C#####Initialize 2x2 Gauss Quadrature Points
      GQPTS(1,1)=-(1/SQRT(3.))
      GQPTS(1,2)=-(1/SQRT(3.))
      GQPTS(2,1)=(1/SQRT(3.))
      GQPTS(2,2)=-(1/SQRT(3.))
      GQPTS(3,1)=(1/SQRT(3.))
      GQPTS(3,2)=(1/SQRT(3.))
      GQPTS(4,1)=-(1/SQRT(3.))
      GQPTS(4,2)=(1/SQRT(3.))


      DO 10 I=1,2
      DO 10 M=1,4
   10 B(I,M)=0.
C#####Loop over all elements
      DO 100 N=1,NUMEL
      MAT=MATNUM(N)
      THECON=RMAT(1,MAT)
      THICK=RMAT(2,MAT)
C#####Clear the local stiffness matrix
      DO 60 I=1,4
      DO 60 M=1,4
   60 T(I,M)=0.

C#####Get element node coordinates
      DO 20 I=1,4
      X(I,1)=XX(1,NOD(I,N))
   20 X(I,2)=XX(2,NOD(I,N))
C#####Loop over all GQ evaluation points
      DO 30 I=1,4
      ETA=GQPTS(I,2)
      XI=GQPTS(I,1)
C#####Evaluate shape function derivatives
      W(1,1)=-(1.-ETA)
      W(1,2)=(1.-ETA)
      W(1,3)=(1.+ETA)
      W(1,4)=-(1.+ETA)
      W(2,1)=-(1.-XI)
      W(2,2)=-(1.+XI)
      W(2,3)=(1.+XI)
      W(2,4)=(1.-XI)
C#####Evaluate Jacobian matrix
      J(1,1) = W(1,1)*X(1,1)+W(1,2)*X(2,1)+W(1,3)*X(3,1)+W(1,4)*X(4,1)
      J(1,2) = W(1,1)*X(1,2)+W(1,2)*X(2,2)+W(1,3)*X(3,2)+W(1,4)*X(4,2)
      J(2,1) = W(2,1)*X(1,1)+W(2,2)*X(2,1)+W(2,3)*X(3,1)+W(2,4)*X(4,1)
      J(2,2) = W(2,1)*X(1,2)+W(2,2)*X(2,2)+W(2,3)*X(3,2)+W(2,4)*X(4,2)
      J(1,1) = J(1,1)/4.
      J(1,2) = J(1,2)/4.
      J(2,1) = J(2,1)/4.
      J(2,2) = J(2,2)/4.
      JJ = J(1,1)*J(2,2)-J(2,1)*J(1,2)
C#####Evaluate jacobian matrix inverse
      G(1,1) = J(2,2)/JJ
      G(1,2) = -J(2,1)/JJ
      G(2,1) = -J(1,2)/JJ
      G(2,2) = J(1,1)/JJ
C####Evaluate B matrix
      B(1,1) = G(1,1)*W(1,1)+G(1,2)*W(2,1)
      B(1,2) = G(1,1)*W(1,2)+G(1,2)*W(2,2)
      B(1,3) = G(1,1)*W(1,3)+G(1,2)*W(2,3)
      B(1,4) = G(1,1)*W(1,4)+G(1,2)*W(2,4)
      B(2,1) = G(2,1)*W(1,1)+G(2,2)*W(2,1)
      B(2,2) = G(2,1)*W(1,2)+G(2,2)*W(2,2)
      B(2,3) = G(2,1)*W(1,3)+G(2,2)*W(2,3)
      B(2,4) = G(2,1)*W(1,4)+G(2,2)*W(2,4)
C#####Evaulate B'*B and to element stiffness matrix
      DO 40 M=1,4
      DO 40 K=M,4
      SUM=0.
      DO 50 L=1,2
   50 SUM = SUM + B(L,M)*B(L,K)
      T(M,K) = T(M,K)+SUM*THICK*THECON
   40 T(K,M) = T(M,K)
   30 CONTINUE
      CALL ADSTIF(KFIX,S,FEXT,NOD,IADRES,T,RE,4,N,0)
  100 CONTINUE
      CALL WR('K11     ',T(1,1),1)
      CALL WR('K12     ',T(1,2),1)
      CALL WR('K13     ',T(1,3),1)
      CALL WR('K14     ',T(1,4),1)
      CALL WR('K22     ',T(2,2),1)
      CALL WR('K23     ',T(2,3),1)
      CALL WR('K24     ',T(2,4),1)
      CALL WR('K33     ',T(3,3),1)
      CALL WR('K34     ',T(3,4),1)
      CALL WR('K44     ',T(4,4),1)
      RETURN
      END
C######################################################################
      SUBROUTINE OPENER(IOP)
      COMMON /DEVICE/ IIN,IOUT,IBUG
      CHARACTER INFILE*30,OUTFIL*30
C
C---- SUBROUTINE TO OPEN AND CLOSE INPUT AND OUTPUT FILES
C     IF IOP=1  OPEN FILES
C     IF IOP=2  CLOSE FILES
C
      IF(IOP.NE.1) GO TO 10
      WRITE(*,1001)
      READ(*,2000)INFILE
      WRITE(*,1002)
      READ(*,2000)OUTFIL
C
      OPEN(UNIT=IIN,FILE=INFILE)
      OPEN(UNIT=IOUT,FILE=OUTFIL)
      RETURN
   10 IF(IOP.NE.2) RETURN
      CLOSE(IIN)
      CLOSE(IOUT)
      RETURN
 1001 FORMAT(/,22H ENTER INPUT FILE NAME)
 1002 FORMAT(/,23H ENTER OUTPUT FILE NAME)
 2000 FORMAT(A)
      END
C#####################################################################
      SUBROUTINE CSTSTF(XX,KFIX,NOD,IADRES,MATNUM,S,FEXT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z),INTEGER(I-N)
      COMMON /KONTRL/ NUMNP,NDOF,NUMEL,NNPE,NSD,NEQ,LENGTH
      COMMON /MATRL / NMAT,RMAT(5,4)
      COMMON /DEVICE/ IIN,IOUT,IBUG
      DIMENSION XX(NSD,NUMNP),KFIX(NEQ),NOD(NNPE,NUMEL),
     .          IADRES(NEQ),MATNUM(NUMEL),S(LENGTH),FEXT(NEQ),
     .          X(2,3),W(3,6),B(3,6),AA(3),BB(3),E(3,3),T(6,6)
C
C---- CSTSTF--CONSTANT STRAIN TRIANGLE STIFFNESS
C---- FORM STIFFNESS MATRIX FOR A 2-DOF/NODE CONST STRAIN TRIANGLE
C
C     THIS SUBROUTINE ASSUMES THAT THE ELEMENT THICKNESS IS RMAT(3,MAT)
C
      DO 10 I=1,3
      DO 10 J=1,6
   10 B(I,J)=0.
C
      DO 100 N=1,NUMEL
      MAT=MATNUM(N)
      THICK=RMAT(3,MAT)
C
C---- COLLECT NODAL COORDS., EVALUATE SHAPE FUNCTIONS AND B-MATRIX
      CALL CST1(X,XX,NOD,AA,BB,B,AREA,N)
C
C---- EVALUATE MATERIAL MATRIX, E, FOR PLANE STRESS
      CALL EMATRX(E,MAT)
C
C---- COMPUTE  E*B
      DO 40 I=1,3
      DO 40 J=1,6
      SUM=0.
      DO 30 K=1,3
   30 SUM=SUM+E(I,K)*B(K,J)
   40 W(I,J)=SUM
C
C---- COMPUTE B(TRANSPOSE)*E*B
      DO 60 I=1,6
      DO 60 J=I,6
      SUM=0.
      DO 50 K=1,3
   50 SUM=SUM+B(K,I)*W(K,J)
      T(I,J)=SUM*THICK*AREA
   60 T(J,I)=T(I,J)
C
C---- ASSEMBLE STIFFNESS MATRIX
      CALL ADSTIF(KFIX,S,FEXT,NOD,IADRES,T,RE,6,N,0)
C
  100 CONTINUE
      RETURN
      END
C######################################################################
      SUBROUTINE CST1(X,XX,NOD,AA,BB,B,AREA,N)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z),INTEGER(I-N)
      COMMON /KONTRL/ NUMNP,NDOF,NUMEL,NNPE,NSD,NEQ,LENGTH
      DIMENSION X(2,3),XX(NSD,NUMNP),NOD(NNPE,NUMEL),AA(3),
     .          BB(3),B(3,6)
C
C---- SUBROUTINE TO COLLECT LOCAL NODAL COORDINATES, EVALUATE SHAPE
C     FUNCTIONS AND FORM THE STRAIN-DISPLACEMENT MATRIX, B, FOR THE 
C     CONSTANT STRAIN TRIANGLE (B IS ASSUMED TO BE INITIALIZED TO
C     ZERO BY THE CALLING ROUTINE)
C
C---- COLLECT NODAL COORDINATES
      DO 20 I=1,3
      X(1,I)=XX(1,NOD(I,N))
   20 X(2,I)=XX(2,NOD(I,N))
      AREA=((X(1,2)-X(1,1))*(X(2,3)-X(2,1))-
     .     (X(1,3)-X(1,1))*(X(2,2)-X(2,1)))/2.
C
C---- EVALUATE SHAPE FUNCTION COEFFICIENTS
      AA(1)=X(1,3)-X(1,2)
      AA(2)=X(1,1)-X(1,3)
      AA(3)=X(1,2)-X(1,1)
      BB(1)=X(2,2)-X(2,3)
      BB(2)=X(2,3)-X(2,1)
      BB(3)=X(2,1)-X(2,2)
C
C---- B-MATRIX
      B(1,1)=BB(1)/(2.*AREA)
      B(1,3)=BB(2)/(2.*AREA)
      B(1,5)=BB(3)/(2.*AREA)
      B(2,2)=AA(1)/(2.*AREA)
      B(2,4)=AA(2)/(2.*AREA)
      B(2,6)=AA(3)/(2.*AREA)
      B(3,1)=B(2,2)
      B(3,2)=B(1,1)
      B(3,3)=B(2,4)
      B(3,4)=B(1,3)
      B(3,5)=B(2,6)
      B(3,6)=B(1,5)
C
      RETURN
      END
C######################################################################
      SUBROUTINE EMATRX(E,MAT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z),INTEGER(I-N)
      COMMON /MATRL / NMAT,RMAT(5,4)
      DIMENSION E(3,3)
C
C---- EVALUATE ELASTICITY MATRIX FOR PLANE STRESS
C
C     THIS SUBROUTINE ASSUMES THAT FOR MATERIAL TYPE  MAT:
C     RMAT(1,MAT)=MODULUS OF ELASTICITY
C     RMAT(2,MAT)=POISSON'S RATIO
C
      EMOD=RMAT(1,MAT)
      RNU=RMAT(2,MAT)
      TEMP=EMOD/(1.-RNU*RNU)
      E(1,1)=TEMP
      E(1,2)=RNU*TEMP
      E(1,3)=0.
      E(2,1)=E(1,2)
      E(2,2)=E(1,1)
      E(2,3)=0.
      E(3,1)=0.
      E(3,2)=0.
      E(3,3)=TEMP*(1.-RNU)/2.
C
      RETURN
      END
C######################################################################
      SUBROUTINE CSTSTR(XX,NOD,MATNUM,DD)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z), INTEGER (I-N)
      COMMON /KONTRL/ NUMNP,NDOF,NUMEL,NNPE,NSD,NEQ,LENGTH
      COMMON /MATRL / NMAT,RMAT(5,4)
      COMMON /DEVICE/ IIN,IOUT,IBUG
      DIMENSION XX(NSD,NUMNP),NOD(NNPE,NUMEL),MATNUM(NUMEL),
     .          DD(NDOF,NUMNP),X(2,3),W(3),B(3,6),AA(3),BB(3),E(3,3),
     .          D(6),STRS(3)
C
C---- CSTSTR--CONSTANT STRAIN TRIANGLE STRESS
C---- COMPUTE AND OUTPUT STATE OF STRESS IN A  CST (STRS=E*B*D)
C
      DO 10 I=1,3
      DO 10 J=1,6
   10 B(I,J)=0.
C
      WRITE(IOUT,1000)
      DO 100 N=1,NUMEL
      MAT=MATNUM(N)
C
C---- COLLECT NODAL DISPLACEMENTS
      DO 20 I=1,3
      DO 20 J=1,2
   20 D((I-1)*2+J)=DD(J,NOD(I,N))
C
C---- COLLECT NODAL COORDS., EVALUATE SHAPE FUNCTIONS AND B-MATRIX
      CALL CST1(X,XX,NOD,AA,BB,B,AREA,N)
C
C---- EVALUATE MATERIAL MATRIX FOR PLANE STRESS
      CALL EMATRX(E,MAT)
C
C---- COMPUTE B*D
      DO 40 I=1,3
      TEMP=0.
      DO 30 J=1,6
   30 TEMP=TEMP+B(I,J)*D(J)
   40 W(I)=TEMP
C
C---- COMPUTE E*(B*D)
      DO 60 I=1,3
      TEMP=0.
      DO 50 J=1,3
   50 TEMP=TEMP+E(I,J)*W(J)
   60 STRS(I)=TEMP
C
C---- OUTPUT RESULTS
      WRITE(IOUT,1001)N,(STRS(I),I=1,3)
C
  100 CONTINUE
C
      RETURN
 1000 FORMAT(///,34H ELEMENT STRESSES  (#,SXX,SYY,SXY),/,1X,16(1H-))
 1001 FORMAT(I5,3E12.4)
      END
C######################################################################
      SUBROUTINE BEMSTF(X,KFIX,NOD,IADRES,MATNUM,S,FEXT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z),INTEGER(I-N)
      COMMON /KONTRL/ NUMNP,NDOF,NUMEL,NNPE,NSD,NEQ,LENGTH
      COMMON /MATRL / NMAT,RMAT(5,4)
      COMMON /DEVICE/ IIN,IOUT,IBUG
      DIMENSION X(NSD,NUMNP),KFIX(NEQ),NOD(NNPE,NUMEL),IADRES(NEQ),
     .          MATNUM(NUMEL),S(LENGTH),FEXT(NEQ),SL(6,6),T(6,6),
     .          RJUNK(6,6)
      DATA T/36*0./
C
C---- FORM STIFFNESS MATRIX FOR 2-DIMENSIONAL FRAME ELEMENTS (EULER-
C     BERNOULLI BEAM WITH AXIAL STIFFNESS)
C     RMAT(1,MAT)=C.S. AREA
C         (2,MAT)=MODULUS
C         (3,MAT)=INERTIA
C
      DO 100 N=1,NUMEL
      DO 5 I=1,6
      DO 5 J=I,6
    5 SL(I,J)=0.
      MAT=MATNUM(N)
      NODE1=NOD(1,N)
      NODE2=NOD(2,N)
C
C---- COMPUTE LENGTH, SINE AND COSINE OF ELEMENT ORIENTATION
      X21=X(1,NODE2)-X(1,NODE1)
      Y21=X(2,NODE2)-X(2,NODE1)
      RLONG=SQRT(X21*X21+Y21*Y21)
      COSINE=X21/RLONG
      SINE  =Y21/RLONG
C
C---- FORM ELEMENT STIFFNESS MATRIX IN LOCAL SYSTEM, SL
      TEMP1=RMAT(1,MAT)*RMAT(2,MAT)/RLONG
      TEMP2=RMAT(2,MAT)*RMAT(3,MAT)/(RLONG**3)
C
      SL(1,1)=TEMP1
      SL(1,4)=-SL(1,1)
      SL(2,2)=12.*TEMP2
      SL(2,3)=6.*RLONG*TEMP2
      SL(2,5)=-SL(2,2)
      SL(2,6)= SL(2,3)
      SL(3,3)=4.*RLONG*RLONG*TEMP2
      SL(3,5)=-SL(2,3)
      SL(3,6)=2.*RLONG*RLONG*TEMP2
      SL(4,4)=TEMP1
      SL(5,5)=SL(2,2)
      SL(5,6)=-SL(2,3)
      SL(6,6)= SL(3,3)
C
      DO 10 I=1,6
      DO 10 J=I,6
   10 SL(J,I)=SL(I,J)
C
C---- PERFORM TRANSFORMATION T(TRANSPOSE)*SL*T
      T(1,1)=COSINE
      T(1,2)=SINE
      T(2,1)=-SINE
      T(2,2)=COSINE
      T(3,3)=1.
      DO 20 I=1,3
      DO 20 J=1,3
   20 T(I+3,J+3)=T(I,J)
C
C---- MATRIX MULTIPLICATION RJUNK=SL*T
      DO 40 I=1,6
      DO 40 J=1,6
      SUM=0.
      DO 30 K=1,6
   30 SUM=SUM+SL(I,K)*T(K,J)
   40 RJUNK(I,J)=SUM
C
C---- MATRIX MULTIPLICATION SL=T(TRANSPOSE)*RJUNK
      DO 60 I=1,6
      DO 60 J=I,6
      SUM=0.
      DO 50 K=1,6
   50 SUM=SUM+T(K,I)*RJUNK(K,J)
      SL(I,J)=SUM
   60 SL(J,I)=SUM
C
C---- ASSEMBLE STIFFNESS MATRIX
      CALL ADSTIF(KFIX,S,FEXT,NOD,IADRES,SL,RE,6,N,0)
C
  100 CONTINUE
      RETURN
      END
C######################################################################
      SUBROUTINE MCHECK(MPEND,IPEND,MAXREL,MAXINT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z),INTEGER(I-N)
      COMMON /DEVICE/ IIN,IOUT,IBUG
C
C---- CHECK IF MEMORY REQUIREMENTS (MPEND AND IPEND) EXCEED THE
C     MAXIMUM STORAGE DECLARED IN CALLING PROGRAM (MAXREL AND MAXINT)
C     IF SO, ISSUE ERROR MESSAGE AND STOP PROGRAM EXECUTION
C
      IF(MPEND.LE.MAXREL .AND. IPEND.LE.MAXINT) RETURN
      WRITE(IOUT,100)
      STOP
  100 FORMAT(///,34H MEMORY ERROR: INSUFFICIENT MEMORY ///,
     .           50H PROGRAM EXECUTION TERMINATED BY SUBROUTINE MCHECK)
      END
C######################################################################
      SUBROUTINE COLHT(NOD,KFIX,IADRES,NEQ,NUMNP,NUMEL,NNPE,NDOF,
     .                 LENGTH,MBAND)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z), INTEGER (I-N)
      DIMENSION IADRES(NEQ),NOD(NNPE,NUMEL),KFIX(NDOF,NUMNP)
C
C---- SCAN ELEMENT CONNECTIVITY TO DETERMINE THE COLUMN HEIGHTS AND
C     DIAGONAL STORAGE LOCATIONS FOR 1-DIMENSIONAL COMPACT COLUMN 
C     STORAGE ACCORDING TO THE SCHEME:
C
C             E.G.,   I A(1)   A(2)        A(6)    I
C                     I        A(3)  A(4)  A(7)    I
C                     I              A(5)  A(8)    I
C                     I                    A(9) ...I
C                     I                      :     I
C     
C     THIS SUBROUTINE FIRST SCANS THE DOF OF ALL ELEMENTS TO DETERMINE
C     COLUMN HEIGHTS WHICH ARE STORED IN IADRES.  ZERO-DISPACEMENT DOF
C     DO NOT INFLUENCE COLUMN HEIGHTS.  SECOND, THE LOCATIONS IN A 1-D
C     ARRAY OF THE DIAGONAL COEFFICIENTS IS COMPUTED AND STORED IN
C     IADRES.  NOTE THAT THE TOTAL AMOUNT OF STORAGE FOR THE 1-D
C     COMPACTED STIFFNESS MATRIX IS EQUAL TO IADRES(NEQ).  ALSO COMPUT-
C     ED IS THE MEAN, OR AVERAGE, SEMI-BANDWIDTH, MBAND.
C
C---- SET INITIAL COLUMN HEIGHTS (I.E., HEIGHTS FOR A DIAGONAL MATRIX)
      DO 10 I=1,NEQ
   10 IADRES(I)=1
C
C---- LOOP OVER NUMBER OF ELEMENTS
      DO 30 N=1,NUMEL
C
C---- LOOP OVER COMBINATIONS OF NODES IN ELEMENT N
      DO 30 III=1,NNPE
      II=NOD(III,N)
      DO 30 JJJ=1,NNPE
      JJ=NOD(JJJ,N)
C
C---- LOOP OVER COMBINATIONS OF DOF FOR GLOBAL NODE NUMBERS II AND JJ
      DO 30 I=1,NDOF
C---- IF THIS DOF HAS PRESCRIBED ZERO VALUE, SKIP TO END OF LOOP
      IF(KFIX(I,II).EQ.1) GO TO 30
      IDOF=(II-1)*NDOF+I
      DO 20 J=1,NDOF
C---- IF THIS DOF HAS PRESCRIBED ZERO VALUE, SKIP TO END OF LOOP
      IF(KFIX(J,JJ).EQ.1) GO TO 20
      JDOF=(JJ-1)*NDOF+J
C---- IF IDOF,JDOF IS ON DIAGONAL OR BELOW, SKIP TO END OF LOOP
      IF(IDOF.GE.JDOF) GO TO 20
C---- IDOF,JDOF LOCATION IS ABOVE DIAGONAL--ADJUST COLUMN HEIGHT
      NEWHGT=JDOF-IDOF+1
      IF(NEWHGT.GT.IADRES(JDOF)) IADRES(JDOF)=NEWHGT
   20 CONTINUE
   30 CONTINUE
C
C
C---- COMPUTE ADDRESSES OF DIAGONAL ENTRIES USING COLUMN HEIGHTS 
      DO 50 I=2,NEQ
   50 IADRES(I)=IADRES(I-1)+IADRES(I)
      LENGTH=IADRES(NEQ)
C
C---- COMPUTE MEAN SEMI-BANDWIDTH, MBAND
      MBAND=IFIX((2.*FLOAT(NEQ)+1.-SQRT((2.*FLOAT(NEQ)+1.)**2-
     .      8.*FLOAT(LENGTH)))/2.)
      RETURN
      END
C######################################################################
      SUBROUTINE INPUT(X,F,KFIX,NOD,MAT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z),INTEGER(I-N)
      COMMON /KONTRL/ NUMNP,NDOF,NUMEL,NNPE,NSD,NEQ,LENGTH
      COMMON /MATRL / NMAT,RMAT(5,4)
      COMMON /DEVICE/ IIN,IOUT,IBUG
      DIMENSION X(NSD,NUMNP),F(NDOF,NUMNP),KFIX(NDOF,NUMNP),
     .          NOD(NNPE,NUMEL),MAT(NUMEL),XX(3),FF(6),KK(6)
C
C---- READ AND WRITE NODAL DATA 
      WRITE(IOUT,2000)
C      CALL WI('IIN     ',IIN ,1)
C      READ(IIN,*)JUNK
C      WRITE(IOUT,*)JUNK
      DO 30 I=1,NUMNP
      READ(IIN,1000)N,(KK(J),J=1,6),(XX(J),J=1,3),(FF(J),J=1,NDOF)
      DO 10 J=1,NSD
   10 X(J,N)=XX(J)
      DO 20 J=1,NDOF
      IF(KK(J).EQ.1 .AND. FF(J).NE.0.) WRITE(IOUT,2001)
      KFIX(J,N)=KK(J)
   20 F(J,N)=FF(J)
   30 WRITE(IOUT,2002)N,(XX(J),J=1,3),(KK(J),J=1,6),(FF(J),J=1,NDOF)
C
C---- READ AND WRITE ELEMENT DATA
      WRITE(IOUT,2003)
      DO 40 I=1,NUMEL
      READ(IIN,1001)N,MAT(N),(NOD(J,N),J=1,NNPE)
      WRITE(IOUT,2004)N,MAT(N),(NOD(J,N),J=1,NNPE)
   40 CONTINUE
C
C---- READ AND WRITE MATERIAL DATA
      WRITE(IOUT,2005)
      DO 50 I=1,NMAT
      READ(IIN,1002)N,(RMAT(J,N),J=1,5)
      WRITE(IOUT,2006)N,(RMAT(J,N),J=1,5)
   50 CONTINUE
C
      WRITE(IOUT,3000)
      RETURN
 1000 FORMAT(I5,4X,6I1,3F10.0,/,15X,6F10.0)
 1001 FORMAT(16I5)
 1002 FORMAT(I5,7F10.0)
 2000 FORMAT(///,43H NODAL DATA  (#,X,Y,Z,K1 THRU K6,F1,F2,...),/,
     .       1X,10(1H-))
 2001 FORMAT(25H ERROR ON FOLLOWING CARD:,/,17H FOR B.C. CODE=1,,
     .       48H PROGRAM EXPECTS A ZERO FORCE/DISPLACEMENT ENTRY )
 2002 FORMAT(I5,3E10.3,4X,6I1,6E10.3)
 2003 FORMAT(///,39H ELEMENT DATA  (#,MAT#,NODE1,NODE2,...),/,
     .       1X,12(1H-))
 2004 FORMAT(16I5)
 2005 FORMAT(///,35H MATERIAL DATA  (#,RMAT1,RMAT2,...),/,1X,13(1H-))
 2006 FORMAT(I5,5E12.4)
 3000 FORMAT(/)
      END
C######################################################################
      SUBROUTINE ADSTIF(KFIX,S,FEXT,NOD,IADRES,T,RE,ITROW,KELE,IOP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z), INTEGER (I-N)
      COMMON /KONTRL/ NUMNP,NDOF,NUMEL,NNPE,NSD,NEQ,LENGTH
      DIMENSION KFIX(NEQ),S(LENGTH),FEXT(NEQ),NOD(NNPE,NUMEL),
     .          IADRES(NEQ),T(ITROW,ITROW),RE(ITROW)
C
C---- ASSEMBLE ELEMENT STIFFNESS AND OPTIONALLY ELEMENT LOAD VECTOR
C     INTO GLOBAL STIFFNESS MATRIX AND GLOBAL LOAD VECTOR.
C     HOMOGENEOUS B.C. ARE ENFORCED BY NOT ASSEMBLING DIAGONAL,
C     ROW AND COLUMN TERMS; IT IS ASSUMED THAT CORRESPONDING FORCE
C     TERMS HAVE BEEN SET TO ZERO BY INPUT DATA.
C     USAGE:
C     KFIX   FIXITY ARRAY. FOR DOF NUMBER M, FIXITY IS:
C            IF KFIX(M)=0 UNCONSTRAINED
C                      =1 ZERO PRESCRIBED VALUE
C                      =2 NONZERO PRESCRIBED VALUE
C
C     S      GLOBAL STIFFNESS MATRIX.
C
C     FEXT   EXTERNAL FORCE VECTOR.
C
C     NOD    ELEMENT NODAL CONNECTIVITY ARRAY.
C
C     IADRES ARRAY CONTAINING STORAGE LOCATIONS OF DIAGONAL TERMS OF
C            STIFFNESS MATRIX.  NOT USED BY THIS SUBROUTINE DIRECTLY,
C            BUT NECESSARY FOR SUBROUTINE LOCSKY.
C
C     T      ELEMENT STIFFNESS MATRIX .
C
C     RE     IF IOP=0, NOT USED.
C            IF IOP=1, ELEMENT LOAD VECTOR.
C
C     ITROW  ROW AND COLUMN DIMENSION OF T (AND RE, IF USED) IN CALLING
C            PROGRAM.
C
C     KELE   ELEMENT NUMBER BEING ASSEMBLED (INPUT).
C
C     IOP    IF IOP=0, ASSEMBLE ELEMENT STIFFNESS MATRIX ONLY.
C            IF IOP=1, ASSEMBLE ELEMENT STIFFNESS MATRIX AND ELEMENT
C                      LOAD VECTOR.
C
C
      DO 100 IGEN=1,NNPE
      DO 100 JGEN=1,NNPE
      IGLB=NDOF*(NOD(IGEN,KELE)-1)
      JGLB=NDOF*(NOD(JGEN,KELE)-1)
C
      DO 100 IDOF=1,NDOF
      DO 100 JDOF=1,NDOF
C---- IF LOWER TRIANGULAR ELEMENT, SKIP ASSEMBLY
      IF(IGLB+IDOF.GT.JGLB+JDOF) GO TO 100
C---- ENFORCE BOUNDARY CONDITION:
C---- IF ZERO-CONSTRAINED DOF, SKIP ASSEMBLY
      IF(KFIX(IGLB+IDOF).EQ.1 .OR. KFIX(JGLB+JDOF).EQ.1) GO TO 100
C
      JADD=LOCSKY(IGLB+IDOF,JGLB+JDOF,IADRES,NEQ)
      S(JADD)=S(JADD)+T(NDOF*(IGEN-1)+IDOF,NDOF*(JGEN-1)+JDOF)
  100 CONTINUE
C
      IF(IOP.NE.1) RETURN
C---- ASSEMBLE ELEMENT LOAD VECTOR INTO GLOBAL LOAD VECTOR
      DO 200 IGEN=1,NNPE
      IGLB=NDOF*(NOD(IGEN,KELE)-1)
      DO 200 IDOF=1,NDOF
C---- SKIP ASSEMBLY IF THIS IS A ZERO OR NONZERO PRESCRIBED DOF
      IF(KFIX(IGLB+IDOF).GE.1) GO TO 200
      FEXT(IGLB+IDOF)=FEXT(IGLB+IDOF)+RE(NDOF*(IGEN-1)+IDOF)
  200 CONTINUE
C
      RETURN
      END
C######################################################################
      SUBROUTINE MODIFY(S,FEXT,KFIX,IADRES,NEQ,LENGTH)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z), INTEGER (I-N)
      DIMENSION KFIX(NEQ),FEXT(NEQ),S(LENGTH),IADRES(NEQ)
C
C---- SUBROUTINE TO MODIFY THE STIFFNESS MATRIX AND LOAD VECTOR TO
C     ACCOUNT FOR ZERO AND NONZERO PRESCRIBED DISPLACEMENTS.
C     INFORMATION FOR DOF M CONTAINED IN FEXT IS ASSUMED TO BE:
C
C     FEXT(M)= FORCE OR LOAD IF DOF M IS UNCONSTRAINED (KFIX(M)=0)
C            = 0. IF DOF M IS ZERO PRESCRIBED (KFIX(M)=1)
C            = VALUE OF THE NONZERO PRESCRIBED DISPLACEMENT IF DOF M
C              IS NONZERO PRESCRIBED (KFIX(M)=2)
C
C---- SCAN ALL DOF AND MODIFY FOR THOSE THAT ARE PRESCRIBED
      DO 100 K=1,NEQ
C
      IF(KFIX(K).NE.1) GO TO 50
C---- D.O.F. HAS PRESCRIBED ZERO VALUE--ENTER UNIT VALUE ON DIAGONAL
C---- OF STIFFNESS MATRIX (OFF-DIAG. TERMS MADE ZERO BY SUB. ADSTIF)
      KDIAG=IADRES(K)
      S(KDIAG)=1.0
      GO TO 100
C
   50 IF(KFIX(K).NE.2) GO TO 100
C---- D.O.F. HAS PRESCRIBED NONZERO VALUE:
C---- MODIFY LOAD VECTOR THEN ZERO OFF-DIAGONAL STIFFNESS COEFF.
      KDIAG=IADRES(K)
      KTOP=KDIAG
      IF(K.GE.2) KTOP=IADRES(K-1)+1
      KEQTOP=K+KTOP-KDIAG
      MPNTER=KTOP-1
C---- LOOP OVER STIFFNESS COEFFICIENTS IN COLUMNWISE ORDER
      DO 10 M=KEQTOP,K-1
      MPNTER=MPNTER+1
C---- SKIP MODIFICATION IF DOF  M  IS ALSO A NONZERO PRESCRIBED DOF
      IF(KFIX(M).NE.2) FEXT(M)=FEXT(M)-S(MPNTER)*FEXT(K)
      S(MPNTER)=0.
   10 CONTINUE
C
C---- LOOP OVER STIFFNESS COEFFICIENTS IN ROWWISE ORDER USING FUNCTION
C     SUBROUTINE LOCSKY TO RETURN THE 1-D STIFFNESS ADDRESS
      DO 20 MEQ=K+1,NEQ
      KMEQLO=LOCSKY(K,MEQ,IADRES,NEQ)
C---- IF STIFFNESS COEFFICIENT IS OUTSIDE SKYLINE, SKIP TO END OF LOOP
      IF(KMEQLO.EQ.0) GO TO 20
C---- SKIP MODIFICATION IF DOF MEQ IS ALSO A NONZERO PRESCRIBED DOF
      IF(KFIX(MEQ).NE.2) FEXT(MEQ)=FEXT(MEQ)-S(KMEQLO)*FEXT(K)
      S(KMEQLO)=0.
   20 CONTINUE
C---- MODIFY DIAGONAL TERM FOR EQUATION K
      S(KDIAG)=1.0
C
  100 CONTINUE
      RETURN
      END
C######################################################################
      FUNCTION LOCSKY(I,J,IADRES,NEQ)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z), INTEGER (I-N)
      DIMENSION IADRES(NEQ)
C
C---- THIS FUNCTION SUBPROGRAM PROVIDES THE ADDRESS IN A 1-D
C     ARRAY CORRESPONDING TO AN I,J ADDRESS IN A 2-D ARRAY THAT
C     IS STORED IN COMPACT COLUMN (SKYLINE) FORM.
C
C     USAGE:
C     I,J    ROW AND COLUMN NUMBERS (INPUT).
C
C     IADRES INPUT ARRAY OF LENGTH NEQ THAT CONTAINS THE ADDRESSES IN
C            A 1-D ARRAY FOR THE DIAGONAL ENTRIES IN A 2-D ARRAY.
C
C     NEQ    NUMBER OF ROWS (EQUATIONS).
C
C     LOCSKY ON OUTPUT, EQUAL TO THE 1-D ADDRESS FOR (I,J) UNLESS
C            (I,J) IS BELOW DIAGONAL OR ABOVE SKYLINE, IN WHICH
C            CASE A VALUE OF ZERO IS RETURNED.
C
C
C---- CHECK IF (I,J) IS BELOW DIAGONAL
      IF(I.GT.J) GO TO 10
C
      JDIAG=IADRES(J)
      JTOP=JDIAG
      IF(J.GT.1) JTOP=IADRES(J-1)+1
      LOCSKY=JDIAG-J+I
C
C---- CHECK IF (I,J) IS ABOVE SKYLINE
      IF(LOCSKY.GE.JTOP) RETURN
C
C---- (I,J) LOCATION IS EITHER BELOW DIAGONAL OR ABOVE SKYLINE
   10 LOCSKY=0
      RETURN
      END
C######################################################################
      SUBROUTINE WI(ID,I,IOP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z), INTEGER (I-N)
      COMMON /DEVICE/ IIN,IOUT,IBUG
      CHARACTER*8 ID
      IF(IOP.GT.IBUG) RETURN
      WRITE(IOUT,100)ID,I
  100 FORMAT(1H ,A8,1H=,I10)
      RETURN
      END
C######################################################################
      SUBROUTINE WR(ID,R,IOP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z), INTEGER (I-N)
      COMMON /DEVICE/ IIN,IOUT,IBUG
      CHARACTER*8 ID
      IF(IOP.GT.IBUG) RETURN
      WRITE(IOUT,100)ID,R
  100 FORMAT(1H ,A8,1H=,G15.5)
      RETURN
      END
C######################################################################
      SUBROUTINE TRFACT(A,B,G,IADRES,TOL,N,LENGTH,IERROR,IPOSDF,IOUT,
     .                  IOP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z), INTEGER (I-N)
      DIMENSION A(LENGTH),B(N),G(N),IADRES(N)
C
C---- GIVEN THE SYSTEM OF SIMULTANEOUS EQUATIONS AX=B, A SYMMETRIC AND
C     B SPECIFIED, THIS SUBROUTINE TRIPLE-FACTORS A INTO U(TRANS)*D*U
C     AND THEN PERFORMS FORWARD/BACK SUBSTITUTION TO OBTAIN THE SOLU-
C     TION X.  A CAN BE POSITIVE OR NEGATIVE DEFINITE.  WARNINGS ARE
C     ISSUED IF THE SUBROUTINE DETECTS POSSIBLE SINGULARITY OR LACK OF
C     POSITIVE DEFINITENESS.  THIS SUBROUTINE EMPLOYS THE FORTRAN77 
C     STANDARD IN WHICH DO LOOPS ARE NOT EXECUTED IF THE BEGINNING
C     INDEX IS LARGER THAN THE ENDING INDEX.
C
C     USAGE:
C     A      FOR IOP=1 OR 3, A CONTAINS, ON INPUT, THE A-COEFFICIENTS
C            OF AX=B STORED IN COMPACTED COLUMN (SKYLINE) FORM ACCORD-
C            ING TO THE SCHEME:
C
C             E.G.,   I A(1)   A(2)        A(6)    I
C                     I        A(3)  A(4)  A(7)    I
C                     I              A(5)  A(8)    I
C                     I                    A(9) ...I
C                     I                      :     I
C
C            ON OUTPUT, D AND U OVERWRITE THE DIAGONAL AND UPPER-DIAG.
C            COEFFICIENTS OF A, RESPECTIVELY.
C            FOR IOP=2, A MUST CONTAIN, ON INPUT, THE COEFFICIENTS OF
C            D AND U, WHICH WERE OBTAINED FROM A PRIOR CALL TO SUB-
C            ROUTINE TRFACT WITH IOP=1 OR 3.
C
C     B      FOR IOP=1, NOT USED.
C            FOR IOP=2 OR 3, B CONTAINS, ON INPUT, THE SPECIFIED RIGHT-
C            HAND-SIDE AND ON OUTPUT, THE SOLUTION X OVERWRITES B.
C
C     G      FOR IOP=1 OR 3, WORK VECTOR OF LENGTH N.
C            FOR IOP=2, NOT USED.
C
C     IADRES INPUT VECTOR OF LENGTH N THAT CONTAINS THE ADDRESSES OF
C            THE DIAGONAL COEFFICIENTS OF A.
C
C     TOL    FOR IOP=1 OR 3, INPUT PARAMETER SPECIFYING TOLERANCE FOR
C            DECAY OF DIAGONAL COEFFICIENTS.  TAKING TOL=10**(-P) WILL
C            INDICATE AN ERROR (NONZERO VALUE OF IERROR AND A MESSAGE
C            PRINTED TO I/O UNIT # IOUT) IF THE P LEADING DIGITS OF ANY
C            PIVOT ELEMENT ARE LOST COMPARED TO ITS ORIGINAL VALUE.
C            FOR GENERAL PURPOSE FINITE ELEMENT EQUATION SOLVING, A 
C            VALUE FOR P EQUAL TO ABOUT ONE-HALF THE NUMBER OF DIGITS
C            FOR FLOATING POINT NUMBERS IS APPROPRIATE.  LARGER AND 
C            SMALLER VALUES OF P PROVIDE FOR LESS STRINGENT AND MORE
C            STRINGENT TESTS ON DIAGNONAL DECAY, RESPECTIVELY.
C            FOR IOP=2, NOT USED.
C
C     N      NUMBER OF EQUATIONS (INPUT).
C
C     LENGTH LENGTH IN WORDS OF 1-D ARRAY A (INPUT).
C
C     IERROR FOR IOP=1 OR 3, ON OUTPUT IERROR=0 IF ABS(D(K,K)/A(K,K))
C            IS GREATER THAN TOL FOR ALL K BETWEEN 1 AND N.  OTHERWISE,
C            IERROR IS EQUAL TO THE ROW NUMBER OF THE FIRST EQUATION
C            THAT DID NOT SATISFY THE TEST.  FAILURE OF THE TEST IS 
C            ALSO PRINTED BY THE SUBROUTINE ON I/O UNIT NUMBER IOUT
C            IF IOUT IS GREATER THAN ZERO, OTHERWISE THE MESSAGE IS 
C            SUPPRESSED.
C            FOR IOP=2, NOT USED.
C
C     IPOSDF FOR IOP=1 OR 3, ON OUTPUT IPOSDF=0 IF THE MATRIX IS POS-
C            ITIVE DEFINITE, AND IPOSDF=-1 IF THE MATRIX IS NOT
C            POSITIVE DEFINITE.
C
C     IOUT   FOR IOP=1 OR 3, INPUT PARAMETER SPECIFYING INPUT/OUTPUT
C            UNIT NUMBER FOR PRINTING OF WARNING MESSAGE IN THE EVENT
C            THAT DIAGONAL DECAY IS DETECTED.  TO SUPPRESS PRINTING OF
C            THE MESSAGE, IOUT SHOULD BE ZERO OR NEGATIVE.
C            FOR IOP=2, NOT USED.
C
C     IOP    INPUT PARAMETER SPECIFYING SOLUTION OPTION:
C               IOP=1  FACTORIZATION ONLY
C                  =2  FORWARD/BACK SUBSTITUTION ONLY
C                  =3  FACTORIZATION AND FORWARD/BACK SUBSTITUTION
C
C
      IF(IOP.EQ.2) GO TO 50
C
C---- FACTORIZATION
C
      IERROR=0
      IPOSDF=0
C
      DO 40 K=2,N
      KDIAG=IADRES(K)
      KTOP=IADRES(K-1)+1
      KEQTOP=K+KTOP-KDIAG
      IPNTER=KTOP-1
C
      DO 20 I=KEQTOP,K-1
      IPNTER=IPNTER+1
      IDIAG=IADRES(I)
      ITOP=IDIAG
      IF(I.GE.2) ITOP=IADRES(I-1)+1
      IEQTOP=I+ITOP-IDIAG
C
      SUM=0.
      MPNTER=ITOP-1
C---- IN FOLLOWING DO LOOP, SKIP OVER G'S THAT ARE ABOVE SKYLINE
      IF(KEQTOP.GT.IEQTOP) MPNTER=MPNTER+KEQTOP-IEQTOP
      DO 10 M=MAX(KEQTOP,IEQTOP),I-1
      MPNTER=MPNTER+1
   10 SUM=SUM+A(MPNTER)*G(M)
      A(IPNTER)=(A(IPNTER)-SUM)/A(IDIAG)
   20 G(I)=A(IDIAG)*A(IPNTER)
C
      SUM=0.
      MPNTER=KTOP-1
      DO 30 M=KEQTOP,K-1
      MPNTER=MPNTER+1
   30 SUM=SUM+A(MPNTER)*G(M)
      TEMP=A(KDIAG)
      A(KDIAG)=A(KDIAG)-SUM
C---- CHECK FOR DECAY OF DIAG. COEFF. AND POSITIVE DEFINITENESS
      IF(IERROR.GT.0) GO TO 40
      RATIO=A(KDIAG)/TEMP
      IF(ABS(RATIO).GT.TOL) GO TO 40
      IERROR=K
      IF(IOUT.GT.0) WRITE(IOUT,1000)RATIO,IERROR
   40 IF(A(KDIAG).LT.0.) IPOSDF=-1
 1000 FORMAT(///,34H SUBROUTINE TRFACT  W A R N I N G:,/,
     .       24H DIAGONAL DECAY RATIO OF,E10.3,
     .       21H DETECTED IN EQUATION,I6,///)
      IF(IOP.EQ.1) RETURN
C
C
   50 CONTINUE
C
C---- FORWARD SUBSTITUTION
      DO 70 K=2,N
      KDIAG=IADRES(K)
      KTOP=IADRES(K-1)+1
      KEQTOP=K+KTOP-KDIAG
      MPNTER=KTOP-1
      SUM=0.
      DO 60 M=KEQTOP,K-1
      MPNTER=MPNTER+1
   60 SUM=SUM+A(MPNTER)*B(M)
   70 B(K)=B(K)-SUM
C
C---- BACK SUBSTITUTION
      DO 80 K=1,N
      KDIAG=IADRES(K)
   80 B(K)=B(K)/A(KDIAG)
      DO 90 K=N,2,-1
      KDIAG=IADRES(K)
      KTOP=IADRES(K-1)+1
      KEQTOP=K+KTOP-KDIAG
      MPNTER=KTOP-1
      DO 90 M=KEQTOP,K-1
      MPNTER=MPNTER+1
   90 B(M)=B(M)-A(MPNTER)*B(K)
      RETURN
      END
C######################################################################
      SUBROUTINE BARSTF(X,KFIX,NOD,IADRES,MATNUM,S,FEXT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z),INTEGER(I-N)
      COMMON /KONTRL/ NUMNP,NDOF,NUMEL,NNPE,NSD,NEQ,LENGTH
      COMMON /MATRL / NMAT,RMAT(5,4)
      COMMON /DEVICE/ IIN,IOUT,IBUG
      DIMENSION X(NSD,NUMNP),KFIX(NEQ),NOD(NNPE,NUMEL),IADRES(NEQ),
     .          MATNUM(NUMEL),S(LENGTH),FEXT(NEQ),SE(4,4)
C
C---- FORM STIFFNESS MATRIX FOR 2-DIMENSIONAL BAR ELEMENTS (TWO-
C     FORCE MEMBER WITH AXIAL STIFFNESS ONLY)
C     RMAT(1,MAT)=C.S. AREA
C         (2,MAT)=MODULUS
C
      DO 100 N=1,NUMEL
      DO 5 I=1,4
      DO 5 J=I,4
    5 SE(I,J)=0.
      MAT=MATNUM(N)
      NODE1=NOD(1,N)
      NODE2=NOD(2,N)
C
C---- COMPUTE LENGTH, SINE AND COSINE OF ELEMENT ORIENTATION
      X21=X(1,NODE2)-X(1,NODE1)
      Y21=X(2,NODE2)-X(2,NODE1)
      RLONG=SQRT(X21*X21+Y21*Y21)
      COSINE=X21/RLONG
      SINE  =Y21/RLONG
C
C---- FORM ELEMENT STIFFNESS MATRIX IN GLOBAL SYSTEM, SE
      TEMP=RMAT(1,MAT)*RMAT(2,MAT)/RLONG
C
      SE(1,1)=TEMP*COSINE*COSINE
      SE(1,2)=TEMP*COSINE*SINE
      SE(1,3)=-SE(1,1)
      SE(1,4)=-SE(1,2)
      SE(2,2)=TEMP*SINE*SINE
      SE(2,3)=SE(1,4)
      SE(2,4)=-SE(2,2)
      SE(3,3)=SE(1,1)
      SE(3,4)=SE(1,2)
      SE(4,4)=SE(2,2)
C
      DO 10 I=1,4
      DO 10 J=I,4
   10 SE(J,I)=SE(I,J)
C
C---- ASSEMBLE STIFFNESS MATRIX
      CALL ADSTIF(KFIX,S,FEXT,NOD,IADRES,SE,RE,4,N,0)
C
  100 CONTINUE
      RETURN
      END
C######################################################################
      SUBROUTINE BARSTR(X,NOD,MATNUM,DD)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z), INTEGER (I-N)
      COMMON /KONTRL/ NUMNP,NDOF,NUMEL,NNPE,NSD,NEQ,LENGTH
      COMMON /MATRL / NMAT,RMAT(5,4)
      COMMON /DEVICE/ IIN,IOUT,IBUG
      DIMENSION X(NSD,NUMNP),NOD(NNPE,NUMEL),MATNUM(NUMEL),
     .          DD(NDOF,NUMNP),D(4)
C
C---- BARSTR--2-NODE BAR ELEMENT (2-D)
C---- COMPUTE AND OUTPUT STATE OF STRESS IN A BAR
C     RMAT(1,MAT)=C.S. AREA
C         (2,MAT)=MODULUS
C
      WRITE(IOUT,1000)
      DO 100 N=1,NUMEL
      MAT=MATNUM(N)
      NODE1=NOD(1,N)
      NODE2=NOD(2,N)
C
C---- COLLECT NODAL DISPLACEMENTS
      DO 20 I=1,2
      DO 20 J=1,2
   20 D((I-1)*2+J)=DD(J,NOD(I,N))
C
C---- COMPUTE INITIAL AND FINAL ELEMENT LENGTH, & ELEMENT ELONGATION
      X21=X(1,NODE2)-X(1,NODE1)
      Y21=X(2,NODE2)-X(2,NODE1)
      RLONG1=SQRT(X21*X21+Y21*Y21)
      X21=X(1,NODE2)+D(3)-(X(1,NODE1)+D(1))
      Y21=X(2,NODE2)+D(4)-(X(2,NODE1)+D(2))
      RLONG2=SQRT(X21*X21+Y21*Y21)
      ELONG=RLONG2-RLONG1
C
C---- COMPUTE ELEMENT LOAD AND STRESS
      STRESS=RMAT(2,MAT)*ELONG/RLONG1
      RLOAD=RMAT(1,MAT)*STRESS
C
C---- OUTPUT RESULTS
      WRITE(IOUT,1001)N,STRESS,RLOAD
C
  100 CONTINUE
C
      RETURN
 1000 FORMAT(///,46H ELEMENT NO., ELEMENT STRESS, ELEMENT LOAD,
     .       /,1X,41(1H-))
 1001 FORMAT(I5,2E14.4)
      END

